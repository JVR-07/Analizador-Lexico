/* MainTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MainTokenManager.java */
import java.io.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class MainTokenManager implements MainConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 27;
            return 213;
         }
         if ((active0 & 0x4204L) != 0L || (active1 & 0x1000002000L) != 0L || (active2 & 0x21L) != 0L || (active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 223;
            return 13;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 25;
            return 202;
         }
         if ((active0 & 0x20000L) != 0L || (active1 & 0x20L) != 0L || (active2 & 0x8000000L) != 0L || (active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 223;
            return 367;
         }
         if ((active2 & 0x100200000000L) != 0L)
         {
            jjmatchedKind = 223;
            return 38;
         }
         if ((active1 & 0x800004001200000L) != 0L || (active2 & 0x80000001408400L) != 0L)
         {
            jjmatchedKind = 223;
            return 116;
         }
         if ((active1 & 0x820000000100L) != 0L || (active2 & 0x10000000800000L) != 0L)
         {
            jjmatchedKind = 223;
            return 34;
         }
         if ((active3 & 0x200000000L) != 0L)
            return 43;
         if ((active0 & 0x2180000000000000L) != 0L || (active1 & 0x500980000L) != 0L || (active2 & 0x400000000182000L) != 0L || (active3 & 0x200040L) != 0L)
         {
            jjmatchedKind = 223;
            return 162;
         }
         if ((active1 & 0xc0000000000000L) != 0L || (active2 & 0x2ffd00000000L) != 0L || (active3 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 223;
            return 43;
         }
         if ((active0 & 0x40000000000002L) != 0L || (active1 & 0x8108000000010000L) != 0L || (active2 & 0x1000000000040000L) != 0L || (active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 223;
            return 138;
         }
         if ((active0 & 0x8000041000L) != 0L || (active1 & 0x240a80040404L) != 0L || (active2 & 0x200400080010010L) != 0L || (active3 & 0x404800L) != 0L)
         {
            jjmatchedKind = 223;
            return 284;
         }
         if ((active3 & 0x4000000000L) != 0L)
            return 53;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x4010000000000000L) != 0L || (active2 & 0x4060000000000000L) != 0L)
         {
            jjmatchedKind = 223;
            return 300;
         }
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x2000000000000000L) != 0L || (active2 & 0x902000000000000L) != 0L)
         {
            jjmatchedKind = 223;
            return 238;
         }
         if ((active0 & 0x4000510000000100L) != 0L || (active1 & 0x1000180000400048L) != 0L || (active2 & 0x2000000000204800L) != 0L || (active3 & 0x1080L) != 0L)
         {
            jjmatchedKind = 223;
            return 182;
         }
         if ((active3 & 0x1000000000L) != 0L)
            return 374;
         if ((active0 & 0x402000000000000L) != 0L || (active1 & 0x10000000000L) != 0L || (active2 & 0x20020000L) != 0L || (active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 223;
            return 254;
         }
         if ((active1 & 0x2L) != 0L || (active2 & 0x800010000100L) != 0L || (active3 & 0x601L) != 0L)
         {
            jjmatchedKind = 223;
            return 326;
         }
         if ((active0 & 0x1000000000L) != 0L || (active3 & 0x400000000L) != 0L)
            return 55;
         if ((active3 & 0x800000000L) != 0L)
            return 375;
         if ((active1 & 0x400000000000L) != 0L || (active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 223;
            return 65;
         }
         if ((active1 & 0x400000010000000L) != 0L || (active2 & 0x8000000000000080L) != 0L)
         {
            jjmatchedKind = 223;
            return 73;
         }
         if ((active0 & 0x8L) != 0L || (active1 & 0x24008000020010L) != 0L || (active2 & 0x4000004001002L) != 0L || (active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 223;
            return 89;
         }
         if ((active0 & 0x80000L) != 0L || (active1 & 0x2002000009000L) != 0L || (active2 & 0x4200000cL) != 0L)
         {
            jjmatchedKind = 223;
            return 216;
         }
         if ((active1 & 0x201000002004000L) != 0L || (active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 223;
            return 235;
         }
         if ((active0 & 0x220000000000L) != 0L || (active1 & 0x28000080L) != 0L || (active2 & 0x40L) != 0L || (active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 223;
            return 24;
         }
         if ((active0 & 0x8000000000010020L) != 0L || (active1 & 0x40000000L) != 0L || (active2 & 0x8000000000200L) != 0L || (active3 & 0x106L) != 0L)
         {
            jjmatchedKind = 223;
            return 269;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 24;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x240000000000L) != 0L || (active2 & 0x400080000000L) != 0L || (active3 & 0x4800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 290;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 72;
         }
         if ((active1 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 79;
         }
         if ((active1 & 0x2000000008000L) != 0L || (active2 & 0x40000000L) != 0L)
            return 232;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x40000000L) != 0L || (active3 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 276;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 24;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x500000000000L) != 0L || (active1 & 0x180000400040L) != 0L || (active2 & 0x204800L) != 0L || (active3 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 189;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x8108000000000000L) != 0L || (active2 & 0x1000000000040000L) != 0L || (active3 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 1;
            }
            return 137;
         }
         if ((active0 & 0x8000001000L) != 0L || (active1 & 0x80040000L) != 0L || (active2 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 288;
         }
         if ((active1 & 0x2000000000000000L) != 0L || (active2 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 248;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 260;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x4000000000000000L) != 0L || (active2 & 0x4060000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 309;
         }
         if ((active2 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 279;
         }
         if ((active2 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 37;
         }
         if ((active1 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 253;
         }
         if ((active2 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 215;
         }
         if ((active0 & 0x45882300000d4324L) != 0L || (active1 & 0xad0823e2a9875acL) != 0L || (active2 & 0x21112df72ec3b275L) != 0L || (active3 & 0x7da01cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 109;
         }
         if ((active2 & 0x10000100L) != 0L || (active3 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 325;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 26;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active1 & 0x4001200000L) != 0L || (active2 & 0x80000001000400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active1 & 0x2L) != 0L || (active2 & 0x800000000000L) != 0L || (active3 & 0x401L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 357;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 37;
               jjmatchedPos = 1;
            }
            return 56;
         }
         if ((active1 & 0x100000000L) != 0L || (active3 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 168;
         }
         if ((active0 & 0x8L) != 0L)
            return 101;
         if ((active1 & 0x10000000L) != 0L || (active2 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 85;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 25;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x24008000000010L) != 0L || (active2 & 0x4000000000000L) != 0L || (active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 88;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x400000000180000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 161;
         }
         if ((active2 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 237;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 370;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 94;
         }
         if ((active3 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 268;
         }
         if ((active0 & 0x2L) != 0L || (active1 & 0x10000L) != 0L || (active2 & 0x20800000000L) != 0L)
            return 43;
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active1 & 0x1000000000000000L) != 0L || (active3 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 1;
            }
            return 181;
         }
         return -1;
      case 2:
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 2;
            }
            return 136;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 120;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x100000400040L) != 0L || (active2 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 188;
         }
         if ((active3 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 349;
         }
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 376;
         }
         if ((active2 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 278;
         }
         if ((active1 & 0x80040000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 287;
         }
         if ((active1 & 0x100000000L) != 0L || (active3 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 167;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 25;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active2 & 0x400000000100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 160;
         }
         if ((active0 & 0x2008000000020020L) != 0L || (active1 & 0x200062023000000L) != 0L || (active2 & 0x100000860cL) != 0L || (active3 & 0x740000L) != 0L)
            return 43;
         if ((active0 & 0x45c23380001d5304L) != 0L || (active1 & 0x7dffc9de589875aeL) != 0L || (active2 & 0xebf3fde76fef70f3L) != 0L || (active3 & 0xbfdbfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 43;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 2;
            }
            return 93;
         }
         if ((active2 & 0x10000100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 324;
         }
         if ((active1 & 0x10L) != 0L || (active2 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 2;
            }
            return 43;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 2;
            }
            return 275;
         }
         return -1;
      case 3:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 92;
         }
         if ((active0 & 0x45c03080001c5300L) != 0L || (active1 & 0x7b7ff9dfd8d874f6L) != 0L || (active2 & 0x6e7e7c65cbfd7763L) != 0L || (active3 & 0x3fffdL) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 119;
         }
         if ((active0 & 0x400000000000L) != 0L || (active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 187;
         }
         if ((active0 & 0x2030000010004L) != 0L || (active1 & 0x480000000000108L) != 0L || (active2 & 0x8181818204020090L) != 0L || (active3 & 0x80002L) != 0L)
            return 43;
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 135;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 274;
         }
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 323;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 3;
            return 286;
         }
         return -1;
      case 4:
         if ((active0 & 0x5c03080001c5200L) != 0L || (active1 & 0x207fb8c598d86456L) != 0L || (active2 & 0x6e2a3825c1795763L) != 0L || (active3 & 0x3fffdL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return 43;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return 91;
         }
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return 118;
         }
         if ((active2 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 4;
            }
            return 328;
         }
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return 134;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 4;
            }
            return 43;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return 285;
         }
         if ((active0 & 0x4000000000000100L) != 0L || (active1 & 0x5b00411a400010a0L) != 0L || (active2 & 0x5444400a842000L) != 0L)
            return 43;
         if ((active0 & 0x400000000000L) != 0L || (active2 & 0x800L) != 0L)
            return 186;
         return -1;
      case 5:
         if ((active2 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 5;
            }
            return 327;
         }
         if ((active0 & 0x8140300000080200L) != 0L || (active1 & 0xa006188490d86450L) != 0L || (active2 & 0x760a282040581f42L) != 0L || (active3 & 0xfe98L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 5;
            }
            return 43;
         }
         if ((active0 & 0x480008000145000L) != 0L || (active1 & 0x78204108000004L) != 0L || (active2 & 0x820100581214021L) != 0L || (active3 & 0x30165L) != 0L)
            return 43;
         if ((active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 5;
            }
            return 377;
         }
         if ((active1 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return 43;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 5;
            }
            return 90;
         }
         return -1;
      case 6:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active0 & 0x8100300000080200L) != 0L || (active1 & 0x2000000400c00010L) != 0L || (active2 & 0x2000080000080340L) != 0L || (active3 & 0xa208L) != 0L)
            return 43;
         if ((active1 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x80061881901c6440L) != 0L || (active2 & 0x560a202000501c02L) != 0L || (active3 & 0x5c90L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 6;
            return 43;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x8006180180060400L) != 0L || (active2 & 0x4408000000100c00L) != 0L || (active3 & 0x4880L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 7;
            return 43;
         }
         if ((active1 & 0x8010386040L) != 0L || (active2 & 0x1202202000401002L) != 0L || (active3 & 0x1410L) != 0L)
            return 43;
         if ((active1 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 235;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4100180060400L) != 0L || (active2 & 0x8000000100c00L) != 0L || (active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 8;
            return 43;
         }
         if ((active1 & 0x8002080000000000L) != 0L || (active2 & 0x4400000000000000L) != 0L || (active3 & 0x4080L) != 0L)
            return 43;
         return -1;
      case 9:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4000080000000L) != 0L || (active2 & 0xc00L) != 0L || (active3 & 0x800L) != 0L)
            return 43;
         if ((active1 & 0x100100060400L) != 0L || (active2 & 0x8000000100000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      case 10:
         if ((active1 & 0x40000L) != 0L || (active2 & 0x8000000100000L) != 0L)
            return 43;
         if ((active1 & 0x100100020400L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 10;
            return 43;
         }
         return -1;
      case 11:
         if ((active1 & 0x100020400L) != 0L)
            return 43;
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 11;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 231);
      case 10:
         return jjStopAtPos(0, 232);
      case 13:
         return jjStopAtPos(0, 233);
      case 32:
         return jjStartNfaWithStates_0(0, 230, 53);
      case 34:
         return jjStartNfaWithStates_0(0, 227, 375);
      case 39:
         return jjStartNfaWithStates_0(0, 228, 374);
      case 40:
         return jjStopAtPos(0, 215);
      case 41:
         return jjStopAtPos(0, 216);
      case 44:
         return jjStopAtPos(0, 222);
      case 46:
         jjmatchedKind = 226;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 221);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x140000000L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8c000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x900000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x220400000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100200000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 219);
      case 92:
         return jjStopAtPos(0, 229);
      case 93:
         return jjStopAtPos(0, 220);
      case 95:
         return jjStartNfaWithStates_0(0, 225, 43);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x2002000009000L, 0x4200000cL, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x220000000000L, 0x28000080L, 0x40L, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000510000000100L, 0x1000180000400048L, 0x2000000000204800L, 0x1080L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x24008000020010L, 0x4000004001002L, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4204L, 0x1000002000L, 0x21L, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000000010020L, 0x40000000L, 0x8000000000200L, 0x106L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x820000000100L, 0x10000000800000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000000002L, 0x8108000000010000L, 0x1000000000040000L, 0x20000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x0L, 0xc0000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000010000000L, 0x8000000000000080L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x20L, 0x8000000L, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x2000000000000000L, 0x902000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x201000002004000L, 0x0L, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x800010000100L, 0x601L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800004001200000L, 0x80000001408400L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000041000L, 0x240a80040404L, 0x200400080010010L, 0x404800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2180000000000000L, 0x500980000L, 0x400000000182000L, 0x200040L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x4010000000000000L, 0x4060000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x402000000000000L, 0x10000000000L, 0x20020000L, 0x8L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x1000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100000L);
      case 123:
         return jjStopAtPos(0, 217);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 218);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 58:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L);
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 63:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x204001000000002aL, active2, 0x808810008003000L, active3, 0x2401L);
      case 99:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 169, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x408000000000000L, active1, 0x42426c001280010L, active2, 0x1847004a1000440L, active3, 0x14820L);
      case 102:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 1, 43);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x400100000000L, active2, 0x2000080000000000L, active3, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000040000L, active1, 0x800000450000000L, active2, 0x1000000020082L, active3, 0xaL);
      case 107:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 163, 43);
         break;
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80104L, active1, 0x200000000L, active2, 0x4002000004L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000100000L, active1, 0xc108000000000000L, active2, 0x5060000000040008L, active3, 0x28000L);
      case 111:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 101);
         return jjMoveStringLiteralDfa2_0(active0, 0x2700000020020L, active1, 0x80180028400140L, active2, 0x800200820060ca10L, active3, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000800004000L, active2, 0x100000000L, active3, 0x40000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000010000L, active1, 0x1001800000000080L, active2, 0x400001014980100L, active3, 0x1204L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0x40000000L, active3, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000001000L, active1, 0x80040000L, active2, 0x200002000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000002000000L, active2, 0x10040000000000L, active3, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x10L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1004L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200L, active1, 0x2000L, active2, 0x21L, active3, 0x200000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x180020000000000L, active1, 0x920400L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000100L, active1, 0x880041000L, active2, 0x410080000900000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2000000000000L, active2, 0xc000200028000001L, active3, 0L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 43);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x11000000000000L, active2, 0x80000000040000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401200004080L, active2, 0x2000002000020000L, active3, 0x10L);
      case 102:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000010000010L, active2, 0x4000000000400L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000080000L, active1, 0x4080000000000004L, active2, 0x10080120L, active3, 0x1004L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L);
      case 108:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 130, 43);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 43);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 214, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20218000000000L, active2, 0x28000080404000L, active3, 0x20002L);
      case 109:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 210, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x4400080000L, active2, 0x200200010L, active3, 0x14000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x100100000420442L, active2, 0x2100000000800L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000010000L, active1, 0x1000800000000000L, active2, 0x4004000000L, active3, 0x80200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000004000L, active1, 0x902000L, active2, 0x8000000000L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0x800L);
      case 114:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 164, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001000L, active1, 0x108000000L, active2, 0x200400000000200L, active3, 0x24e9L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000100004L, active1, 0xc000000000008L, active2, 0x810440000002L, active3, 0x8000L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 43);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 43);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 213, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000020000000200L, active1, 0xa200000000000120L, active2, 0x1841040102001040L, active3, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40080000000000L, active2, 0x1000000L, active3, 0L);
      case 119:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 43);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 43);
         break;
      case 120:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L, active2, 0x100000000000000L, active3, 0L);
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 43);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 131, 43);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 33:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 157);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000100000L, active1, 0x10080000020090L, active2, 0x1000L, active3, 0x4401L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x4000080400420L, active2, 0x2000000000000000L, active3, 0L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x500000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 43);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 43);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 43);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 43);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 43);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 161, 43);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 193, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000040200L, active1, 0x832b208750900000L, active2, 0x10242400c2050601L, active3, 0x44L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L, active2, 0x80000L, active3, 0L);
      case 104:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 43);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 176, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0x4000000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x40000000001002L, active2, 0xa40000100000000L, active3, 0x20020L);
      case 107:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 191, 43);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x2000L, active2, 0xa000000402000L, active3, 0L);
      case 109:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200100L, active3, 0x200L);
      case 110:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 43);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 211, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x400084010900000L, active3, 0L);
      case 111:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 43);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 183, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x4000004000000000L, active2, 0x1000000L, active3, 0x10080L);
      case 112:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400008004000L, active2, 0x10002008000000L, active3, 0x2010L);
      case 115:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000100L, active1, 0x1000000000000000L, active2, 0x820L, active3, 0L);
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 43);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000000000L, active1, 0x100000040044L, active2, 0x2L, active3, 0x1008L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0x2000810000200000L, active2, 0x400004000L, active3, 0x8900L);
      case 119:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0x40L, active3, 0L);
      case 121:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x100004000L, active2, 0x2000000100L, active3, 0x40L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x401000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x200000000006L, active2, 0x200000080000000L, active3, 0L);
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 43);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 180, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 43);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 43);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 43);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 166, 43);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 174, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x4000000400000L, active2, 0x4000100000000040L, active3, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L, active2, 0x80000L, active3, 0L);
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 43);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x242040L, active2, 0x200000200202L, active3, 0x3200L);
      case 107:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0x2000000001000000L, active3, 0L);
      case 108:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000100000000000L, active1, 0x80000L, active2, 0x400000000L, active3, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0x14000L, active3, 0x1L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 43);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000080200L, active1, 0x42000000100000L, active2, 0x80000000000L, active3, 0x20004L);
      case 111:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 155, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000040000L, active1, 0x408000000L, active2, 0x2000100000000L, active3, 0L);
      case 112:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0x1L, active3, 0x4000L);
      case 114:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 43);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 43);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 43);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 178, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0xa009180000000000L, active2, 0x1000000040000400L, active3, 0x18110L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 43);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x420000000100000L, active3, 0L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 43);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 43);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 43);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30000010000000L, active2, 0x8000010000820L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0x88L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000800000L, active2, 0x800000000000000L, active3, 0x20L);
      case 120:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 43);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 170, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1800000000000L, active2, 0L, active3, 0L);
      case 33:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(5, 65);
         break;
      case 97:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 144, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x2000108080980000L, active2, 0x501000L, active3, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x42000L, active2, 0x4002000000000000L, active3, 0x1000L);
      case 100:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 194, 43);
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0x2000100000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 43);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 43);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 43);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 43);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 43);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 187, 43);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 197, 43);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 200, 43);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x100100000000000L, active1, 0L, active2, 0x2000080000080440L, active3, 0xa000L);
      case 102:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 43);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 43);
         break;
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 43);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L);
      case 104:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80010020000L, active2, 0x400000000000000L, active3, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x10L, active2, 0x10000000L, active3, 0x400L);
      case 110:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 43);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 160, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x4000000000040L, active2, 0x1000000000000002L, active3, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 43);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200400L, active2, 0x900L, active3, 0L);
      case 115:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 133, 43);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 43);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 192, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0x200L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 43);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 43);
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 43);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 43);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 43);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0x2000020c0000000L, active3, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 119:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 43);
         break;
      case 121:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 208, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 33:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 158);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 159);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100040000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0x1002000000000800L, active3, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1800000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x20000L, active2, 0x500002L, active3, 0L);
      case 100:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 189, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0x10L);
      case 101:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 201, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000200000L, active2, 0x400200000000000L, active3, 0x400L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 43);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000002000L, active2, 0L, active3, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 108:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 43);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 43);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 195, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10100000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 43);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 43);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 137, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000400L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4400L, active2, 0x2000000000L, active3, 0x4000L);
      case 114:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 43);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 43);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 205, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 43);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 207, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 43);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 43);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000080000L, active2, 0L, active3, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 43);
         break;
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 43);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 33:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 156);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000040000L, active2, 0x400L, active3, 0L);
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 43);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 43);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 43);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 43);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 43);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 140, 43);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L, active2, 0x800L, active3, 0x800L);
      case 107:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 150, 43);
         break;
      case 108:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 177, 43);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 188, 43);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 202, 43);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 204, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x180000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2080000000400L, active2, 0x400000000000000L, active3, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 112:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 43);
         break;
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 43);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 165, 43);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 173, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 43);
         break;
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 43);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 121:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(7, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 100:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 190, 43);
         break;
      case 101:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 199, 43);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 206, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L, active2, 0x100000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0x800L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0x180000000L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 43);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 43);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 186, 43);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 99:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 43);
         break;
      case 103:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 108:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 203, 43);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 115:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 138, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 139, 43);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x100100000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x400L, active2, 0L);
      case 104:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 179, 43);
         break;
      case 110:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 148, 43);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L, active2, 0L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 82, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 43);
         break;
      case 108:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 96, 43);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x100000000000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 108, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 374;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 268:
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 279:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 288:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 275:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 286:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 4:
                  if ((0xfffffffffffffbffL & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if ((0x2400000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 38)
                     { jjCheckNAddTwoStates(211, 18); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(59, 60); }
                  else if (curChar == 46)
                     { jjAddStates(3, 4); }
                  else if (curChar == 32)
                  {
                     if (kind > 241)
                        kind = 241;
                     { jjCheckNAdd(53); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(50, 51); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(47, 48); }
                  if (curChar == 61)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 62)
                     { jjCheckNAddStates(8, 12); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(7, 199); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(16, 18); }
                  else if (curChar == 43)
                     { jjCheckNAddTwoStates(194, 7); }
                  else if (curChar == 42)
                     { jjCheckNAddTwoStates(192, 7); }
                  else if (curChar == 46)
                  {
                     if (kind > 237)
                        kind = 237;
                     { jjCheckNAdd(45); }
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 37)
                     { jjCheckNAdd(7); }
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 376:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 260:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 328:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 375:
                  if ((0x3ff400000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  else if (curChar == 34)
                  {
                     if (kind > 238)
                        kind = 238;
                  }
                  break;
               case 300:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 370:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 326:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 325:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 357:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 284:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 377:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 278:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 276:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 287:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 213:
               case 18:
                  if (curChar == 61 && kind > 28)
                     kind = 28;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 274:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 285:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 327:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 349:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 290:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 323:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 237)
                        kind = 237;
                     { jjCheckNAdd(45); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if (curChar == 46)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 374:
                  if ((0x3ff400000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  else if (curChar == 39)
                  {
                     if (kind > 239)
                        kind = 239;
                  }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 202:
                  if (curChar == 60)
                     { jjCheckNAdd(18); }
                  else if (curChar == 61)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if (curChar == 60)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 324:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 367:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 5:
                  if ((0xac2000000000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 6:
                  if ((0x2400000000000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 7:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 8:
                  if (curChar == 37)
                     { jjCheckNAdd(7); }
                  break;
               case 15:
                  if ((0x5000000000000000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 16:
                  if (curChar == 33 && kind > 26)
                     kind = 26;
                  break;
               case 17:
                  if (curChar == 38 && kind > 27)
                     kind = 27;
                  break;
               case 41:
                  if ((0xfffffffffffffbffL & l) != 0L && kind > 234)
                     kind = 234;
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 237)
                     kind = 237;
                  { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 237)
                     kind = 237;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 47:
                  if ((0x3ff400000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 34 && kind > 238)
                     kind = 238;
                  break;
               case 49:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 50:
                  if ((0x3ff400000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 51:
                  if (curChar == 39 && kind > 239)
                     kind = 239;
                  break;
               case 52:
                  if (curChar != 32)
                     break;
                  if (kind > 241)
                     kind = 241;
                  { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  { jjCheckNAdd(53); }
                  break;
               case 54:
                  if (curChar == 46)
                     { jjAddStates(3, 4); }
                  break;
               case 56:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 57:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 59:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 60:
               case 251:
                  if (curChar == 61)
                     { jjCheckNAdd(59); }
                  break;
               case 191:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(192, 7); }
                  break;
               case 192:
                  if (curChar == 42 && kind > 23)
                     kind = 23;
                  break;
               case 193:
                  if (curChar == 43)
                     { jjCheckNAddTwoStates(194, 7); }
                  break;
               case 194:
                  if (curChar == 43 && kind > 23)
                     kind = 23;
                  break;
               case 195:
                  if (curChar == 45)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 196:
                  if (curChar == 45 && kind > 23)
                     kind = 23;
                  break;
               case 197:
                  if (curChar == 62 && kind > 34)
                     kind = 34;
                  break;
               case 198:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(7, 199); }
                  break;
               case 199:
                  if (curChar != 47)
                     break;
                  if (kind > 240)
                     kind = 240;
                  { jjCheckNAdd(200); }
                  break;
               case 200:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 240)
                     kind = 240;
                  { jjCheckNAdd(200); }
                  break;
               case 201:
                  if (curChar == 60)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 203:
                  if (curChar == 60)
                     { jjCheckNAdd(18); }
                  break;
               case 204:
                  if (curChar == 62)
                     { jjCheckNAddStates(8, 12); }
                  break;
               case 205:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 206:
                  if (curChar == 62)
                     { jjCheckNAdd(205); }
                  break;
               case 207:
               case 208:
                  if (curChar == 62)
                     { jjCheckNAdd(18); }
                  break;
               case 209:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 38)
                     { jjCheckNAddTwoStates(211, 18); }
                  break;
               case 211:
                  if (curChar == 38 && kind > 26)
                     kind = 26;
                  break;
               case 250:
                  if (curChar == 61)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 359:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 360:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  { jjCheckNAdd(360); }
                  break;
               case 361:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(361, 44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 268:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 279:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 288:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 253:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 136:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 275:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 286:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 238:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 248;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 240;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 134:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 235:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 114)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 4:
                  if (kind > 234)
                     kind = 234;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 223)
                        kind = 223;
                  }
                  else if (curChar == 124)
                     { jjCheckNAddTwoStates(213, 18); }
                  else if (curChar == 94)
                     { jjCheckNAdd(18); }
                  if (curChar == 109)
                     { jjAddStates(19, 22); }
                  else if (curChar == 112)
                     { jjAddStates(23, 29); }
                  else if (curChar == 117)
                     { jjAddStates(30, 35); }
                  else if (curChar == 115)
                     { jjAddStates(36, 39); }
                  else if (curChar == 102)
                     { jjCheckNAddStates(40, 44); }
                  else if (curChar == 118)
                     { jjAddStates(45, 46); }
                  else if (curChar == 110)
                     { jjAddStates(47, 49); }
                  else if (curChar == 111)
                     { jjCheckNAddTwoStates(235, 157); }
                  else if (curChar == 97)
                     { jjAddStates(50, 54); }
                  else if (curChar == 99)
                     { jjAddStates(55, 56); }
                  else if (curChar == 116)
                     { jjAddStates(57, 61); }
                  else if (curChar == 105)
                     { jjCheckNAddStates(62, 67); }
                  else if (curChar == 114)
                     { jjAddStates(68, 70); }
                  else if (curChar == 100)
                     { jjAddStates(71, 76); }
                  else if (curChar == 108)
                     { jjAddStates(77, 81); }
                  else if (curChar == 119)
                     { jjAddStates(82, 83); }
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 189:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 187:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 137:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 376:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 102)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 182:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 189;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 138:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 110)
                     { jjCheckNAdd(20); }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 146;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 260:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 328:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 327;
                  break;
               case 375:
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 300:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 320;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 316;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 312;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 309;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 301;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 370:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 118)
                  {
                     if (kind > 90)
                        kind = 90;
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 369;
                  break;
               case 115:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 120;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 181:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 326:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 357;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 352;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 350;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 342;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 336;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 331;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 119:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 116:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 254:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 260;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 115)
                     { jjCheckNAdd(84); }
                  break;
               case 325:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 349;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 341;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 330;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 357:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 106;
                  else if (curChar == 102)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  break;
               case 284:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 294;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 290;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 288;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 109;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 96;
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 377:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 101)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 278:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 115)
                     { jjCheckNAdd(163); }
                  break;
               case 216:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 232;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 228;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 222;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 215;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 232:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 269:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 276;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 272;
                  else if (curChar == 110)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 276:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 287:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 213:
                  if (curChar == 124 && kind > 26)
                     kind = 26;
                  break;
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 274:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 285:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 99)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 99)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 161:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(163); }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 188:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 186:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 162:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 173;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 168;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     { jjCheckNAdd(36); }
                  break;
               case 309:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 327:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 349:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 348;
                  break;
               case 290:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 108)
                     { jjCheckNAdd(36); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 160:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 323:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 328;
                  if (curChar == 116)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 99)
                     { jjCheckNAdd(84); }
                  break;
               case 248:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 114)
                     { jjCheckNAdd(117); }
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 374:
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 215:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 100)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 237:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 116)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 324:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 340;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 329;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 367:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 372;
                  else if (curChar == 117)
                     { jjCheckNAdd(217); }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 370;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 366;
                  break;
               case 0:
                  if (curChar == 100 && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 9:
                  if (curChar == 115 && kind > 25)
                     kind = 25;
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x5000000040000000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 19:
                  if (curChar == 94)
                     { jjCheckNAdd(18); }
                  break;
               case 20:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 21:
                  if (curChar == 110)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 27:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 108 && kind > 53)
                     kind = 53;
                  break;
               case 31:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 102 && kind > 57)
                     kind = 57;
                  break;
               case 39:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 223)
                     kind = 223;
                  break;
               case 41:
                  if (kind > 234)
                     kind = 234;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(43); }
                  break;
               case 61:
                  if (curChar == 119)
                     { jjAddStates(82, 83); }
                  break;
               case 62:
                  if (curChar == 101 && kind > 4)
                     kind = 4;
                  break;
               case 63:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 101 && kind > 21)
                     kind = 21;
                  break;
               case 67:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 108)
                     { jjAddStates(77, 81); }
                  break;
               case 71:
                  if (curChar == 112 && kind > 4)
                     kind = 4;
                  break;
               case 74:
                  if (curChar == 97 && kind > 6)
                     kind = 6;
                  break;
               case 75:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 103 && kind > 43)
                     kind = 43;
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 116 && kind > 60)
                     kind = 60;
                  break;
               case 86:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 100)
                     { jjAddStates(71, 76); }
                  break;
               case 95:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 110 && kind > 38)
                     kind = 38;
                  break;
               case 97:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 99:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 108 && kind > 42)
                     kind = 42;
                  break;
               case 104:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 110:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 114)
                     { jjAddStates(68, 70); }
                  break;
               case 112:
                  if (curChar == 110 && kind > 7)
                     kind = 7;
                  break;
               case 113:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 117:
                  if (curChar == 101 && kind > 13)
                     kind = 13;
                  break;
               case 121:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 121 && kind > 47)
                     kind = 47;
                  break;
               case 124:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 105)
                     { jjCheckNAddStates(62, 67); }
                  break;
               case 131:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 132:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 139:
                  if (curChar == 115 && kind > 11)
                     kind = 11;
                  break;
               case 140:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 108 && kind > 11)
                     kind = 11;
                  break;
               case 149:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 116 && kind > 13)
                     kind = 13;
                  break;
               case 152:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 110)
                     { jjCheckNAdd(20); }
                  break;
               case 157:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 158:
                  if (curChar == 116)
                     { jjAddStates(57, 61); }
                  break;
               case 159:
                  if (curChar == 116 && kind > 10)
                     kind = 10;
                  break;
               case 163:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 164:
                  if (curChar == 117)
                     { jjCheckNAdd(163); }
                  break;
               case 165:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 119 && kind > 64)
                     kind = 64;
                  break;
               case 169:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 115 && kind > 64)
                     kind = 64;
                  break;
               case 171:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 111 && kind > 75)
                     kind = 75;
                  break;
               case 176:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 99)
                     { jjAddStates(55, 56); }
                  break;
               case 180:
                  if (curChar == 116)
                     { jjCheckNAdd(117); }
                  break;
               case 183:
                  if (curChar == 114 && kind > 47)
                     kind = 47;
                  break;
               case 184:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 190:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 200:
                  if (kind > 240)
                     kind = 240;
                  jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 212:
                  if (curChar == 124)
                     { jjCheckNAddTwoStates(213, 18); }
                  break;
               case 214:
                  if (curChar == 97)
                     { jjAddStates(50, 54); }
                  break;
               case 217:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 218:
                  if (curChar == 99)
                     { jjCheckNAdd(217); }
                  break;
               case 219:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 121 && kind > 60)
                     kind = 60;
                  break;
               case 225:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 114 && kind > 60)
                     kind = 60;
                  break;
               case 229:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 99 && kind > 75)
                     kind = 75;
                  break;
               case 231:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 233:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 111)
                     { jjCheckNAddTwoStates(235, 157); }
                  break;
               case 236:
                  if (curChar == 110)
                     { jjAddStates(47, 49); }
                  break;
               case 239:
                  if (curChar == 108 && kind > 48)
                     kind = 48;
                  break;
               case 240:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 101 && kind > 53)
                     kind = 53;
                  break;
               case 243:
                  if (curChar == 99)
                     { jjCheckNAdd(242); }
                  break;
               case 244:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 249:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 252:
                  if (curChar == 118)
                     { jjAddStates(45, 46); }
                  break;
               case 255:
                  if (curChar == 101 && kind > 47)
                     kind = 47;
                  break;
               case 256:
               case 363:
                  if (curChar == 108)
                     { jjCheckNAdd(255); }
                  break;
               case 257:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 261:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 102)
                     { jjCheckNAddStates(40, 44); }
                  break;
               case 263:
                  if (curChar == 110 && kind > 6)
                     kind = 6;
                  break;
               case 264:
                  if (curChar == 111)
                     { jjCheckNAdd(263); }
                  break;
               case 265:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 270:
                  if (curChar == 116 && kind > 42)
                     kind = 42;
                  break;
               case 271:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 277:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 115)
                     { jjAddStates(36, 39); }
                  break;
               case 282:
                  if (curChar == 114)
                     { jjCheckNAdd(20); }
                  break;
               case 283:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 289:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 291:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if (curChar == 101 && kind > 59)
                     kind = 59;
                  break;
               case 293:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if (curChar == 117)
                     { jjAddStates(30, 35); }
                  break;
               case 297:
                  if (curChar == 103 && kind > 15)
                     kind = 15;
                  break;
               case 298:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 301:
                  if (curChar == 101 && kind > 15)
                     kind = 15;
                  break;
               case 302:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if (curChar == 100 && kind > 48)
                     kind = 48;
                  break;
               case 304:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 306:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 310:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if (curChar == 116 && kind > 59)
                     kind = 59;
                  break;
               case 312:
                  if (curChar == 110)
                     { jjCheckNAdd(311); }
                  break;
               case 313:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if (curChar == 103 && kind > 59)
                     kind = 59;
                  break;
               case 315:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 316:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 317:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 318:
                  if (curChar == 114)
                     { jjCheckNAdd(311); }
                  break;
               case 319:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 320:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 319;
                  break;
               case 321:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 322:
                  if (curChar == 112)
                     { jjAddStates(23, 29); }
                  break;
               case 329:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 330:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 331:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 330;
                  break;
               case 332:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 333:
                  if (curChar == 99 && kind > 52)
                     kind = 52;
                  break;
               case 334:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 335:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 336:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 337:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 336;
                  break;
               case 338:
                  if (curChar == 101 && kind > 52)
                     kind = 52;
                  break;
               case 339:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 340:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 339;
                  break;
               case 341:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 340;
                  break;
               case 342:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 341;
                  break;
               case 343:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 344:
                  if (curChar == 100 && kind > 52)
                     kind = 52;
                  break;
               case 345:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 346:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 347:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 346;
                  break;
               case 348:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 350:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 349;
                  break;
               case 351:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 350;
                  break;
               case 352:
                  if (curChar == 98 && kind > 52)
                     kind = 52;
                  break;
               case 353:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 354:
                  if (curChar == 103)
                     { jjCheckNAdd(242); }
                  break;
               case 355:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 354;
                  break;
               case 356:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 355;
                  break;
               case 358:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 362:
                  if (curChar == 109)
                     { jjAddStates(19, 22); }
                  break;
               case 364:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 363;
                  break;
               case 365:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 364;
                  break;
               case 366:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 368:
                  if (curChar == 117)
                     { jjCheckNAdd(217); }
                  break;
               case 369:
                  if (curChar == 101 && kind > 90)
                     kind = 90;
                  break;
               case 371:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 372:
                  if (curChar == 118 && kind > 90)
                     kind = 90;
                  break;
               case 373:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 372;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 234)
                     kind = 234;
                  break;
               case 200:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 240)
                     kind = 240;
                  jjstateSet[jjnewStateCnt++] = 200;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 374 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\151\146", "\145\154\163\145", "\144\157", null, "\146\157\162", null, 
null, "\143\154\141\163\163", "\145\170\164\145\156\144\163", null, null, 
"\163\164\162\165\143\164", null, "\145\170\160\157\162\164", null, "\146\162\157\155", "\155\157\144", 
"\163\151\172\145\157\146", "\141\154\151\147\156\157\146", "\165\156\163\141\146\145", null, null, null, 
null, null, null, null, null, "\74\75\76", "\77\77", "\77", "\77\72", "\174\76", 
null, "\72\72", "\56\56\56", null, null, "\163\164\162\151\156\147", 
"\143\150\141\162", "\142\171\164\145", null, null, "\143\157\155\160\154\145\170", 
"\142\157\157\154\145\141\156", "\143\157\156\163\164", null, null, "\166\157\151\144", null, "\156\145\167", 
null, null, "\151\156\163\164\141\156\143\145\157\146", "\164\171\160\145\157\146", 
"\164\171\160\145\144\145\146", null, "\166\145\143\164\157\162", null, null, "\164\162\171", 
"\143\141\164\143\150", "\146\151\156\141\154\154\171", null, "\160\141\156\151\143\41", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\155\141\164\143\150", 
"\143\157\156\164\151\156\165\145", "\142\162\145\141\153", "\147\157\164\157", null, 
"\163\171\156\143\150\162\157\156\151\172\145\144", null, "\141\167\141\151\164", "\145\170\160\154\151\143\151\164", 
"\157\160\145\162\141\164\157\162", "\141\163", "\151\163", "\144\171\156\141\155\151\143\137\143\141\163\164", 
"\163\164\141\164\151\143\137\143\141\163\164", "\164\145\155\160\154\141\164\145", "\164\171\160\145\156\141\155\145", 
"\162\145\161\165\151\162\145\163", "\143\157\156\143\145\160\164", "\164\171\160\145\166\141\162", 
"\162\145\146", "\157\165\164", null, "\142\157\162\162\157\167", 
"\154\151\146\145\164\151\155\145", "\142\157\170", "\146\151\170\145\144", 
"\163\164\141\143\153\141\154\154\157\143", "\164\150\162\145\141\144\137\154\157\143\141\154", "\163\154\145\145\160", 
"\164\151\155\145\157\165\164", "\163\160\141\167\156", "\145\166\145\156\164", "\141\144\144", 
"\162\145\155\157\166\145", "\144\145\154\145\147\141\164\145", "\166\141\154\165\145", "\147\145\164", 
"\163\145\164", "\143\157\166\141\162\151\141\156\164", 
"\143\157\156\164\162\141\166\141\162\151\141\156\164", "\163\145\154\145\143\164", "\167\150\145\162\145", 
"\147\162\157\165\160\40\142\171", "\157\162\144\145\162\40\142\171", "\141\163\143\145\156\144\151\156\147", 
"\144\145\163\143\145\156\144\151\156\147", "\151\156\163\145\162\164", "\165\160\144\141\164\145", 
"\144\145\154\145\164\145", "\150\141\166\151\156\147", "\152\157\151\156", "\151\156\156\145\162", 
"\157\165\164\145\162", "\154\145\146\164", "\162\151\147\150\164", "\143\162\157\163\163", 
"\156\141\164\165\162\141\154", "\165\156\151\157\156", "\151\156\164\145\162\163\145\143\164", 
"\145\170\143\145\160\164", "\144\151\163\164\151\156\143\164", "\141\154\154", "\141\156\171", 
"\163\157\155\145", "\145\170\151\163\164\163", "\142\145\164\167\145\145\156", 
"\154\151\153\145", "\160\162\151\155\141\162\171", "\146\157\162\145\151\147\156", 
"\162\145\146\145\162\145\156\143\145\163", "\143\157\156\163\164\162\141\151\156\164", 
"\144\141\164\141\142\141\163\145", "\164\141\142\154\145", "\143\157\154\165\155\156", "\162\157\167", 
"\163\143\150\145\155\141", "\166\151\145\167", "\151\156\144\145\170", "\164\162\151\147\147\145\162", 
"\164\162\141\156\163\141\143\164\151\157\156", "\143\157\155\155\151\164", "\162\157\154\154\142\141\143\153", 
"\147\162\141\156\164", "\162\145\166\157\153\145", "\141\154\164\145\162", "\144\162\157\160", 
"\155\141\143\162\157", "\160\162\151\156\164\154\156\41", "\166\145\143\41", 
"\141\163\163\145\162\164\41", "\163\145\154\145\143\164\41", "\117\160\164\151\157\156", "\123\157\155\145", 
"\122\145\163\165\154\164", "\117\153", "\105\162\162", "\111\164\145\162\141\164\157\162", 
"\103\154\157\156\145", "\103\157\160\171", "\110\141\163\150", "\122\143", "\115\165\164\145\170", 
"\103\150\141\156\156\145\154", "\123\145\156\144\145\162", "\122\145\143\145\151\166\145\162", 
"\163\145\162\144\145", "\160\141\163\163", "\167\151\164\150", "\156\157\156\154\157\143\141\154", 
"\144\145\146\145\162", "\146\141\154\154\164\150\162\157\165\147\150", "\147\165\141\162\144", 
"\165\156\154\145\163\163", "\165\156\164\151\154", "\162\145\144\157", "\156\145\170\164", 
"\163\164\162\151\143\164\146\160", "\164\162\141\156\163\151\145\156\164", "\156\141\164\151\166\145", 
"\151\156\164\145\162\156\141\154", "\143\150\145\143\153\145\144", "\165\156\143\150\145\143\153\145\144", 
"\154\157\143\153", "\160\141\162\141\155\163", "\146\151\154\145", "\146\162\151\145\156\144", 
"\166\151\162\164\165\141\154", "\157\166\145\162\162\151\144\145", "\144\145\162\151\166\145", 
"\164\150\162\145\141\144", "\143\157\162\157\165\164\151\156\145", "\146\165\164\165\162\145", 
"\160\162\157\155\151\163\145", "\160\141\162\141\154\154\145\154", 
"\163\145\161\165\145\156\164\151\141\154", "\143\162\151\164\151\143\141\154", "\142\141\162\162\151\145\162", 
"\163\145\155\141\160\150\157\162\145", "\145\156\163\165\162\145\163", "\155\145\155\157\162\171", 
"\151\156\154\151\156\145", "\152\160\155", "\152\163\157\156", "\170\155\154", "\164\170\164", 
"\163\161\154", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", null, null, 
"\137", "\56", "\42", "\47", "\134", "\40", "\11", "\12", "\15", null, null, null, 
null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   360, 361, 44, 55, 57, 59, 251, 197, 59, 205, 206, 207, 209, 59, 202, 203, 
   196, 7, 197, 367, 368, 371, 373, 326, 332, 337, 343, 351, 353, 358, 300, 302, 
   310, 313, 317, 321, 284, 289, 291, 295, 269, 263, 273, 277, 280, 254, 261, 238, 
   241, 249, 216, 223, 227, 229, 233, 182, 190, 162, 165, 169, 174, 178, 138, 147, 
   150, 155, 156, 157, 116, 122, 129, 89, 95, 97, 102, 108, 110, 73, 78, 80, 
   83, 86, 65, 69, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MainTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MainTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 374; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[374];
    private final int[] jjstateSet = new int[2 * 374];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
