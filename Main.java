/* Main.java */
/* Generated By:JavaCC: Do not edit this line. Main.java */
import java.io.*;
import java.util.*;

public class Main implements MainConstants {

  private static final Map<Integer, String> TOKEN_NAMES = new HashMap<>();
  static {
    // 1) Intentamos poblar TOKEN_NAMES con los nombres simbólicos (MainConstants.*)
    try {
        for (java.lang.reflect.Field f : MainConstants.class.getFields()) {
            if (f.getType() == int.class) {
                try {
                    int val = f.getInt(null);
                    String name = f.getName();
                    // Excluimos arrays y campos de texto que JavaCC genera
                    if (!name.equals("tokenImage") && !name.equals("lexStateNames")) {
                        TOKEN_NAMES.put(val, name);
                    }
                } catch (IllegalAccessException ignored) { }
            }
        }
    } catch (Throwable t) {
        // Si algo falla, dejamos TOKEN_NAMES vacío para usar fallback más abajo.
      }

    // 2) Complemento: si hay índices no mapeados, rellenamos con tokenImage (representación literal).
    try {
        String[] images = MainConstants.tokenImage;
        for (int i = 0; i < images.length; i++) {
          TOKEN_NAMES.putIfAbsent(i, images[i]);
        }
    } catch (Throwable t) {
        // ignore — si tampoco existe tokenImage, dejaremos DESCONOCIDO luego
      }
  }


  public static void main(String[] args) throws Exception {
    Scanner sc = new Scanner(System.in);

    while (true) {
        System.out.println("\n=== Analizador L\u00e9xico ===");
        System.out.println("1. Ingresar texto manualmente");
        System.out.println("2. Analizar archivo .txt");
        System.out.println("3. Salir");
        System.out.print("> ");

        String op = sc.nextLine().trim();
            switch (op) {
                case "1":
                    analizarInteractivo(sc);
                    break;
                case "2":
                    analizarArchivo(sc);
                    break;
                case "3":
                    System.out.println("Saliendo...");
                    return;
                default:
                    System.out.println("Opci\u00f3n no v\u00e1lida.");
            }
    }
  }

  private static void analizarInteractivo(Scanner sc) {
    System.out.println("Modo interactivo (Ctrl + C o 'salir' para terminar)");
      while (true) {
          System.out.print("> ");
          String input = sc.nextLine();
          if (input.equalsIgnoreCase("salir")) break;

          analizarCadena(input);
      }
  }

  private static void analizarArchivo(Scanner sc) {
    System.out.print("Nombre del archivo .txt: ");
    String nombre = sc.nextLine();

    try {
        StringBuilder contenido = new StringBuilder();
        BufferedReader br = new BufferedReader(new FileReader(nombre));
        String linea;
        while ((linea = br.readLine()) != null)
            contenido.append(linea).append("\n");
            br.close();
            analizarCadena(contenido.toString());
      } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }
  }

  private static void analizarCadena(String input) {
    try {
        MainTokenManager tm = new MainTokenManager(
            new SimpleCharStream(new StringReader(input))
        );

        Token token;
        while ((token = tm.getNextToken()).kind != MainConstants.EOF) {
            if (token.kind == MainConstants.ESPACIO)
                continue;

            String tipo = TOKEN_NAMES.getOrDefault(token.kind, "DESCONOCIDO");
            System.out.printf("\u2192 Token: %-15s | Tipo: <%s>\n", token.image, tipo);
        }
      } catch (TokenMgrError e) {
          System.err.println("Error l\u00e9xico: " + e.getMessage());
        } catch (Exception e) {
          System.err.println("Error general: " + e.getMessage());
        }
  }

  /** Generated Token Manager. */
  public MainTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	   jj_la1_init_6();
	   jj_la1_init_7();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {};
	}
	private static void jj_la1_init_6() {
	   jj_la1_6 = new int[] {};
	}
	private static void jj_la1_init_7() {
	   jj_la1_7 = new int[] {};
	}

  /** Constructor with InputStream. */
  public Main(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Main(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MainTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Main(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MainTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MainTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public Main(MainTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(MainTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[242];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		   if ((jj_la1_6[i] & (1<<j)) != 0) {
			 la1tokens[192+j] = true;
		   }
		   if ((jj_la1_7[i] & (1<<j)) != 0) {
			 la1tokens[224+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 242; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
